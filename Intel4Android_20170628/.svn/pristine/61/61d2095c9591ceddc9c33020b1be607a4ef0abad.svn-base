package com.gagakj.intel4android.network.http;


import android.content.Context;


import com.gagakj.intel4android.application.IntelApplication;
import com.gagakj.intel4android.network.interfaces.INetInterface;
import com.gagakj.intel4android.network.model.IModel;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;

import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;
import rx.Observable;
import rx.Subscriber;
import rx.android.schedulers.AndroidSchedulers;
import rx.functions.Func1;
import rx.schedulers.Schedulers;

/**
 * @Author: jiangqq
 * @Data: 16/4/12 下午3:27
 * @Description: 网络请求数据类（单例）
 */
public class HTTPHelper {

    /**
     * 这一部分配置常量，可以抽取出常量类
     */
    public  static final String IMAGE_PATH = "http://120.77.63.106:8088/nightClub";
    private static final String RELEASE_PATH = "http://58.218.213.113:8880/mcoa/";
    private static final String DEBUG_PATH = "http://192.168.0.200:8080/NightclubWebApp/";//访问的地址
    private static final long DEFAULT_TIMEOUT = 20000;//默认超时时间(毫秒)

    private Context mContext;
    private Retrofit mRetrofit;
    private INetInterface mNetService;

    private HTTPHelper() {
        OkHttpClient.Builder okHttpClient = new OkHttpClient.Builder();
        okHttpClient.addInterceptor(new HeaderInterceptor(IntelApplication.getInstance()));
        okHttpClient.connectTimeout(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);
        okHttpClient.readTimeout(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);//等待服务器响应的时间
        okHttpClient.writeTimeout(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);
        mRetrofit = new Retrofit.Builder()
                .client(okHttpClient.build())
                .addConverterFactory(ResponseConverterFactory.create())
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
                .baseUrl(RELEASE_PATH)
                .build();
        mNetService = mRetrofit.create(INetInterface.class);
    }

    /**
     * 单例控制器
     */
    private static class SingletonHolder {
        private static final HTTPHelper INSTANCE = new HTTPHelper();
    }

    /**
     * 获取单例对象
     *
     * @return
     */
    public static HTTPHelper getInstance() {
        return SingletonHolder.INSTANCE;
    }

    /**
     * 类型转换，用来统一处理返回值，通常为公共message返回字段等。具体业务这里要具体操作
     *
     * @param <T> Subscriber真正需要的数据类型，也就是返回值针对的model
     */
    private class HttpResultFunc<T> implements Func1<IModel, T> {
        @Override
        public T call(IModel iModel) {
            if (iModel == null) {
                try {
                    throw new Exception("result model is null");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            T t = (T) iModel;
            if (t == null) {
                try {
                    throw new Exception("cast to the model is null");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            return t;
        }
    }

    /**
     * 初始化观察者
     *
     * @param observable
     * @param resultType
     * @param listener
     */
    private Subscriber initObservable(Observable observable, int resultType, ResultSubscriber.OnResultListener listener) {
        ResultSubscriber subscriber = new ResultSubscriber(mContext);
        subscriber.setOnResultListener(listener);
        subscriber.setRequestType(resultType);
        observable
                .subscribeOn(Schedulers.io())
                .unsubscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(subscriber);
        return subscriber;
    }
    //********************************对应 INetService接口中定义的请求方法*************************************************//

    /**
     *
     * 待办列表获取
     * @param clazz
     * @param params
     * @param resultType
     * @param listener
     * @param <T>
     */
    public <T extends IModel> void pendingMattersReq(Class<T> clazz, HashMap<String, String> params, int resultType, ResultSubscriber.OnResultListener listener) {
        Observable<T> observable = (Observable<T>) mNetService.pendingMatters(params);
        initObservable(observable, resultType, listener);
    }

    /**
     * 在办列表获取
     * @param clazz
     * @param params
     * @param resultType
     * @param listener
     * @param <T>
     */
    public <T extends IModel> void alreadyMattersReq(Class<T> clazz, HashMap<String, String> params, int resultType, ResultSubscriber.OnResultListener listener) {
        Observable<T> observable = (Observable<T>) mNetService.alreadyMatters(params);
        initObservable(observable, resultType, listener);
    }

    /**
     * 已办列表获取
     * @param clazz
     * @param params
     * @param resultType
     * @param listener
     * @param <T>
     */
    public <T extends IModel> void completeMattersReq(Class<T> clazz, HashMap<String, String> params, int resultType, ResultSubscriber.OnResultListener listener) {
        Observable<T> observable = (Observable<T>) mNetService.completeMatters(params);
        initObservable(observable, resultType, listener);
    }
}
